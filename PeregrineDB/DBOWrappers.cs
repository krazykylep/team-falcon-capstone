//------------------------------------------------------------------------------
// c. 2012 by Nicholas Benson
// This file contains wrappers for the Autogenerated DB objects
//-----------------------------------------------------------------------------

namespace PeregrineDBWrapper
{
    using System;
    using System.Data.Linq;
    using PeregrineAPI;
    using PeregrineDB;

    public class ProcessWrapper : ProcessDTO
    {
        private const int UNASSIGNED_IDENTITY = -1;     // identity is assigned when
                                                        // Process is created in DB

        public ProcessWrapper()
        {
            ProcessId = UNASSIGNED_IDENTITY;
            ProcessName = "";
            State = 0;
        }

        public ProcessWrapper(string procName, ProcessState procState)
        {
            ProcessId = UNASSIGNED_IDENTITY;
            ProcessName = procName;
            State = procState;
        }

        public ProcessWrapper(int id)
        {
            PeregrineDBDataContext db = new PeregrineDBDataContext();
            ISingleResult<GetProcessResult> result = db.GetProcess(id);
            // should only have one proc in result
            foreach (GetProcessResult proc in result)
            {
                ProcessId = proc.ProcessID;
                ProcessName = proc.ProcessName;
                State = (ProcessState)proc.State;
            }
        }

        public void PutInDatabase()
        {
            PeregrineDBDataContext db = new PeregrineDBDataContext();
            ISingleResult<InsertProcessResult> result = db.InsertProcess(null, ProcessName, (int)State);
            // should only have one proc in result
            foreach (InsertProcessResult proc in result)
            {
                ProcessId = proc.ProcessID;
                ProcessName = proc.ProcessName;
                State = (ProcessState)proc.State;
            }
        }

        public void DeleteFromDatabase()
        {
            PeregrineDBDataContext db = new PeregrineDBDataContext();
            db.DeleteProcess(ProcessId);
        }
    }

    public class JobWrapper : JobDTO
    {
        private const int UNASSIGNED_IDENTITY = -1;     // identity is assigned when
                                                        // Job is created in DB

        public JobWrapper()
        {
            JobId = UNASSIGNED_IDENTITY;
            JobName = "";
            PlannedCount = 0;
            PercentComplete = 0;
            PercentComplete = 0;
        }

        public JobWrapper(string jName, int pCount, int cCount, double pComplete)
        {
            JobId = UNASSIGNED_IDENTITY;
            JobName = jName;
            PlannedCount = pCount;
            PercentComplete = cCount;
            PercentComplete = pComplete;
        }

        public JobWrapper(int id)
        {
            PeregrineDBDataContext db = new PeregrineDBDataContext();
            ISingleResult<GetJobResult> result = db.GetJob(id);
            // should only have one job in result
            foreach (GetJobResult job in result)
            {
                JobId = job.JobID;  
                JobName = job.JobName;
                PlannedCount = (int)job.PlannedCount;
                PercentComplete = (double)job.PercentComplete;
            }
        }

        public void PutInDatabase()
        {
            PeregrineDBDataContext db = new PeregrineDBDataContext();
            ISingleResult<InsertJobResult> result = db.InsertJob(null, JobName, PlannedCount, 0, PercentComplete);
            // should only have one job in result
            foreach (InsertJobResult job in result)
            {
                JobId = job.JobID;
                JobName = job.JobName;
                PlannedCount = (int)job.PlannedCount;
                PercentComplete = (double)job.PercentComplete;
            }
        }

        public void DeleteFromDatabase()
        {
            PeregrineDBDataContext db = new PeregrineDBDataContext();
            db.DeleteJob(JobId);
        }
    }

    public class MessageWrapper : MessageDTO
    {
        private const int UNASSIGNED_IDENTITY = -1;     // identity is assigned when
                                                        // Message is created in DB

        public MessageWrapper()
        {
            MessageId = UNASSIGNED_IDENTITY;
            Message = "";      
            Date = DateTime.Now;
            Category = 0;
            Priority = 0;
        }

        public MessageWrapper(string messText, DateTime messDate, Category messCategory, Priority messPriority)
        {
            MessageId = UNASSIGNED_IDENTITY;
            Message = messText;
            Date = messDate;
            Category = messCategory;
            Priority = messPriority;
        }
    
        public MessageWrapper(int id)
        {
            PeregrineDBDataContext db = new PeregrineDBDataContext();
            ISingleResult<GetMessageResult> result = db.GetMessage(id);
            // should only have one message in result
            foreach (GetMessageResult mess in result)
            {
                MessageId = mess.MessageID;
                Message = mess.Message;
                Date = mess.Date;
                Category = (Category)mess.Category;
                Priority = (Priority)mess.Priority;
            }
        }

        public void PutInDatabase()
        {
            PeregrineDBDataContext db = new PeregrineDBDataContext();
            ISingleResult<InsertMessageResult> result = db.InsertMessage(null, Message, Date, (int)Category, (int)Priority);
            // should only have one message in result
            foreach (InsertMessageResult mess in result)
            {
                MessageId = mess.MessageID;
                Message = mess.Message;
                Date = mess.Date;
                Category = (Category)mess.Category;
                Priority = (Priority)mess.Priority;
            }
        }

        public void DeleteFromDatabase()
        {
            PeregrineDBDataContext db = new PeregrineDBDataContext();
            db.DeleteMessage(MessageId);
        }
    }
}